on:
  workflow_dispatch:

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  TF_VAR_AVAILABILITY_ZONES: ${{ secrets.AVAILABILITY_ZONES }}
  TF_VAR_CIDR_BLOCKS_OBJECT: ${{ secrets.CIDR_BLOCKS_OBJECT }}
  TF_VAR_CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  TF_VAR_CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
  TF_VAR_DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
  TF_VAR_DOMAIN: ${{ secrets.DOMAIN }}
  TF_VAR_ECS_FAMILY: ${{ secrets.ECS_FAMILY }}
  TF_VAR_ECS_LAUNCH_TYPE: ${{ secrets.ECS_LAUNCH_TYPE }}
  TF_VAR_ENV_NAME: ${{ secrets.ENV_NAME }}
  TF_VAR_HOST_PORT: ${{ secrets.HOST_PORT }}
  TF_VAR_LB_TYPE: ${{ secrets.LB_TYPE }}
  TF_VAR_REGION: ${{ secrets.REGION }}
  TF_VAR_REPLICAS: ${{ secrets.REPLICAS }}
  TF_VAR_SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
  TF_VAR_TARGET_GROUP_TYPE: ${{ secrets.TARGET_GROUP_TYPE }}
  DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  STAGING_DIRECTORY: infrastructure/terraform/environments/staging

jobs:
  build_and_deploy_to_staging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
          aws-region: ${{ env.TF_VAR_REGION }}
      - name: login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}
      - name: Build Docker Image
        run: |
          echo "build docker image from current code"
          docker build -f Dockerfile -t ${{ env.TF_VAR_DOCKER_IMAGE }} .
      - name: Push image to DockerHub
        run: |
          echo "pushing image to DockerHub"
          docker push ${{ env.TF_VAR_DOCKER_IMAGE }}
      - name: configure Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.STAGING_DIRECTORY }}
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ${{ env.STAGING_DIRECTORY }}
      - name: Terraform apply
        id: apply
        run: terraform apply --auto-approve -input=false
        working-directory: ${{ env.STAGING_DIRECTORY }}

  test:
    runs-on: ubuntu-latest
    needs: build_and_deploy_to_staging
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4 
        with:
          python-version: '3.11'
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: run api tests
        run: python -m pytest
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: tests-results-allure-report
          path: allure-results/
          retention-days: 30
      - name: deploy allure report to github pages
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
    
  destory_resources:
    runs-on: ubuntu-latest
    needs: [build_and_deploy_to_staging, test]
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
          aws-region: ${{ env.REGION }}
      - name: configure Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: "1.1.7"
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.STAGING_DIRECTORY }}
      - name: Terraform destory
        id: destroy
        run: terraform destroy --auto-approve -input=false
        working-directory: ${{ env.STAGING_DIRECTORY }}

        





          



